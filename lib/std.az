struct pair!(A, B)
{
    first: A;
    second: B;
}

fn safe_minus(lhs: u64, rhs: u64) -> u64
{
    assert lhs >= rhs;
    return lhs - rhs;
}

fn hash!(T)(value: T&) -> u64
{
    if @is_fundamental(T) { return value@ as u64; }
    else                  { return value.hash(); }
}

fn swap!(T)(lhs: T&, rhs: T&)
{
    let temp := lhs@;
    lhs@ = rhs@;
    rhs@ = temp;
}

fn qs_partition!(T)(arr: T[], low: u64, high: u64) -> u64
{
    let p := arr[low];
    var i := low;
    var j := high;

    while i < j {
        while arr[i] <= p && i <= high - 1u {
            i = i + 1u;
        }
        while arr[j] > p && j >= low + 1u {
            j = j - 1u;
        }
        if (i < j) {
            swap!(T)(arr[i]&, arr[j]&);
        }
    }

    swap!(T)(arr[low]&, arr[j]&);
    return j;
}

fn partial_sort!(T)(arr: T[], low: u64, high: u64)
{
    if (low >= high) return;
    let pi := qs_partition!(T)(arr, low, high);
    if (pi > 0u) {
        partial_sort!(T)(arr, low, pi - 1u);
    }
    if (pi < @len(arr) - 1u) {
        partial_sort!(T)(arr, pi + 1u, high);
    }
}

fn sort!(T)(arr: T[])
{
    partial_sort!(T)(arr, 0u, @len(arr) - 1u);
}

fn abs(x: i64) -> i64
{
    return x >= 0 ? x : -x;
}

fn equal(lhs: char const[], rhs: char const[]) -> bool
{
    if @len(lhs) != @len(rhs) { return false; }
    var idx := 0u;
    while idx < @len(lhs) {
        if lhs[idx] != rhs[idx] { return false; }
        idx = idx + 1u;
    }
    return true;
}

fn find(string: char const[], substr: char const[], start: u64) -> u64
{
    var idx := start;
    while idx + @len(substr) <= @len(string) {
        let curr_substr := string[idx : idx + @len(substr)];
        if equal(substr, curr_substr) {
            return idx;
        }
        idx = idx + 1u;
    }
    return @len(string);
}

fn contains(string: char const[], substr: char const[]) -> bool
{
    return find(string, substr, 0u) != @len(string);
}

fn occurrences(string: char const[], substr: char const[]) -> u64
{
    var count := 0u;
    var idx := 0u;
    while idx < @len(string) {
        let curr_substr := string[idx : idx + @len(substr)];
        if equal(substr, curr_substr) {
            count = count + 1u;
            idx = idx + @len(substr);
        } else {
            idx = idx + 1u;
        }
    }
    return count;
}

struct split_iterator
{
    _string: char const[];
    _delim: char const[];
    _start: u64;
    _curr: u64;
    _started: bool;
    _finished: bool;

    fn current(self: const&) -> char const[]
    {
        return self._string[self._start : self._curr];
    }

    # Returns the current string prior to advancing
    fn next(self: &) -> char const[]
    {
        let curr := self.current();

        if self._started {
            self._start = self._curr + @len(self._delim);
            if self._start > @len(self._string) {
                self._finished = true;
                self._start = @len(self._string);
                self._curr = @len(self._string);
            }
            else {
                self._curr = find(self._string, self._delim, self._start);
            }
        }
        else { # first time
            self._curr = find(self._string, self._delim, self._start);
            self._started = true;
        }

        return curr;
    }

    fn valid(self: const&) -> bool
    {
        return !self._finished;
    }

    fn create(input: char const[], delim: char const[]) -> split_iterator
    {
        var t := split_iterator(input, delim, 0u, 0u, false, false);
        t.next(); # prime the split_iterator at the first word
        return t;
    }
}

# Convenience function, less typing needed
fn split(input: char const[], delim: char const[]) -> split_iterator
{
    return split_iterator.create(input, delim);
}

fn replace(a: arena&, string: char const[], from: char const[], to: char const[]) -> char const[]
{
    let new_size := @len(from) == @len(to) ? @len(string)
                                           : @len(string) + occurrences(string, from) * (@len(to) - @len(from));

    var new_string := new(a, new_size) ' ';
    var idx := 0u;
    var tok := split_iterator.create(string, from);
    assert tok.valid(); # There is always at least one token (it may be the whole string)
    let curr := tok.current();
    let size := @len(curr);
    @copy(new_string[idx : idx + size], tok.current());
    idx = idx + size;
    tok.next();

    while tok.valid() {
        @copy(new_string[idx : idx + @len(to)], to);
        idx = idx + @len(to);

        let curr := tok.current();
        let size := @len(curr);
        @copy(new_string[idx : idx + size], tok.current());
        idx = idx + size;
        tok.next();
    }

    return new_string;
}

fn to_i64(c: char) -> i64
{
    let x := c as i64;
    if 47 < x && x < 58 {
        return x - 48;
    }
    return -1;
}

fn str_to_i64(str: char const[]) -> i64
{
    var value := 0;
    for c in str {
        let char_val := to_i64(c@);
        if char_val == -1 { return -1; }
        value = 10 * value + char_val;
    }
    return value;
}

struct vector!(T)
{
    _arr: arena&;
    _data: T[];
    _size: u64;

    fn to_span(self: &) -> T[]
    {
        return self._data[0u : self._size];
    }

    fn capacity(self: &) -> u64
    {
        return @len(self._data);
    }

    fn reserve(self: &, size: u64) -> null
    {
        assert(size > self.capacity());
        self._data = new(self._arr, size, self._data) T();
    }

    fn size(self: const&) -> u64
    {
        return self._size;
    }

    fn at(self: const&, index: u64) -> T
    {
        return self._data[index];
    }

    fn back(self: const&) -> T
    {
        return self._data[self._size - 1u];
    }

    fn push(self: &, value: T) -> null
    {
        let cap := self.capacity();
        if self._size == cap {
            let new_cap := cap > 0u ? cap * 2u : 8u;
            self.reserve(new_cap);
        }
        self._data[self._size] = value;
        self._size = self._size + 1u;
    }

    fn create(arr: arena&) -> vector!(T)
    {
        return vector!(T)(arr, null, 0u);
    }
}

struct range_iter!(T)
{
    _curr: T;
    _max: T;

    fn valid(self: const&) -> bool
    {
        return self._curr < self._max;
    }

    fn next(self: &) -> T
    {
        let ret := self._curr;
        self._curr = self._curr + (1 as T);
        return ret;
    }
}

fn range!(T)(max: T) -> range_iter!(T)
{
    assert T == i64 || T == u64;
    return range_iter!(T)(0 as T, max);
}

fn sqrt(value: f64) -> f64
{
    var z := 1.0;
    for _ in range(15) {
        z = z - (z * z - value) / (2.0 * z);
    }
    return z;
}

struct pairwise_iterator_value!(T)
{
    left: T&;
    right: T&;
}

struct pairwise_iterator!(T)
{
    _elems: T[];
    _curr: u64;

    fn current(self: const&) -> pairwise_iterator_value!(T)
    {
        return pairwise_iterator_value!(T)(self._elems[self._curr]&, self._elems[self._curr + 1u]&);
    }

    fn valid(self: const&) -> bool
    {
        return self._curr + 1u < @len(self._elems);
    }

    fn next(self: &) -> pairwise_iterator_value!(T)
    {
        let curr := self.current();
        self._curr = self._curr + 1u;
        return curr;
    }
}

fn pairwise!(T)(elems: T[]) -> pairwise_iterator!(T)
{
    assert @len(elems) >= 2u;
    return pairwise_iterator!(T)(elems, 0u);
}

struct enumerate_iterator_value!(A)
{
    index: u64;
    value: A;
}

struct enumerate_iterator!(T)
{
    _iter: T;
    _curr: u64;

    fn valid(self: const&) -> bool
    {
        return self._iter.valid();
    }

    fn next(self: &) -> enumerate_iterator_value!(@type_of(self._iter.next()))
    {
        var v := self._iter.next();
        let Z := enumerate_iterator_value!(@type_of(v));

        var curr := Z();
        curr.index = self._curr;
        curr.value = v;

        self._curr = self._curr + 1u;
        return curr;
    }
}

fn enumerate!(T)(iter: T) -> enumerate_iterator!(T)
{
    return enumerate_iterator!(T)(iter, 0u);
}

struct zip_iterator_value!(T, U)
{
    left:  T&;
    right: U&;
    index: u64;
}

struct zip_iterator!(T, U)
{
    _left:  T[];
    _right: U[];
    _curr:  u64;

    fn size(self: const&) -> u64
    {
        return @len(self._left) < @len(self._right) ? @len(self._left) : @len(self._right);
    }

    fn valid(self: const&) -> bool
    {
        return self._curr < self.size();
    }

    fn current(self: const&) -> zip_iterator_value!(T, U)
    {
        return zip_iterator_value!(T, U)(self._left[self._curr]&, self._right[self._curr]&, self._curr);
    }

    fn next(self: &) -> zip_iterator_value!(T, U)
    {
        let curr := self.current();
        self._curr = self._curr + 1u;
        return curr;
    }
}

fn zip!(T, U)(left: T[], right: U[]) -> zip_iterator!(T, U)
{
    assert @len(left) == @len(right);
    return zip_iterator!(T, U)(left, right, 0u);
}