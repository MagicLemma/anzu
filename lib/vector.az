struct vector!(T)
{
    _arr: arena&;
    _data: T[];
    _size: u64;

    fn to_span(self: &) -> T const[]
    {
        return self._data[0u : self._size];
    }

    fn capacity(self: &) -> u64
    {
        return len(self._data);
    }

    fn reserve(self: &, size: u64) -> null
    {
        assert(size > self.capacity());
        self._data = new(self._arr, size, self._data) T();
    }

    fn size(self: const&) -> u64
    {
        return self._size;
    }

    fn at(self: const&, index: u64) -> T
    {
        return self._data[index];
    }

    fn push(self: &, value: T) -> null
    {
        let cap := self.capacity();
        if self._size == cap {
            let new_cap := cap > 0u ? cap * 2u : 8u;
            self.reserve(new_cap);
        }
        self._data[self._size] = value;
        self._size = self._size + 1u;
    }

    fn test!(U)(self: &, u: U) -> null
    {
        print("{}\n", u);
    }

    fn create(arr: arena&) -> vector!(T)
    {
        return vector!(T)(arr, nullptr, 0u);
    }
}