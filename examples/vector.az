
struct vector
{
    data:     i64[];
    size:     u64;

    fn push(self: &vector, val: i64) -> null
    {
        if (self->size == self->data.size()) {
            new_cap := 2u * self->data.size();
            if new_cap == 0u {
                new_cap = 1u;
            }
            newdata := new i64 : new_cap;

            idx := 0u;
            while idx != self->size {
                newdata[idx] = self->data[idx];
                idx = idx + 1u;
            }

            delete self->data;
            self->data = newdata;
        }
        self->data[self->size] = val;
        self->size = self->size + 1u;
    }

    fn pop(self: &vector) -> i64
    {
        self->size = self->size - 1u;
        ret := self->data[self->size];
        return ret;
    }

    fn size(self: &vector) -> u64
    {
        return self->size;
    }

    fn capacity(self: &vector) -> u64
    {
        return self->data.size();
    }

    fn drop(self: &vector) -> null
    {
        delete self->data;
    }
}

fn new_vector() -> vector
{
    # We don't have nullptr yet, so we must allocate some space here for now
    return vector(new i64 : 1u, 0u);
}

v := new_vector();

v.push(4);
v.push(7);
v.push(8);

idx := 0u;
while idx != v.size() {
    println(v.data[idx]);
    idx = idx + 1u;
}