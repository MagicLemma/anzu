
struct vector!(T)
{
    _arr: arena&;
    _data: T[];
    _size: u64;

    fn to_span(self: &) -> T const[]
    {
        return self._data[0u : self._size];
    }

    fn reserve(self: &, size: u64) -> null
    {
        let cap := self.capacity();
        if cap < size {
            var new_buf := new(self._arr, size) T();
            
            # Copy existing values over
            {
                var idx := 0u;
                while idx < self._size {
                    new_buf[idx] = self._data[idx];
                    idx = idx + 1u;
                }
            }
            self._data = new_buf;
        }
    }

    fn capacity(self: &) -> u64
    {
        return self._data.size();
    }

    fn size(self: const&) -> u64
    {
        return self._size;
    }

    fn at(self: const&, index: u64) -> T
    {
        return self._data[index];
    }

    fn push(self: &, value: T) -> null
    {
        let cap := self.capacity();
        if self._size == cap {
            var new_cap := 8u;
            if cap > 0u {
                new_cap = cap * 2u;
            }
            self.reserve(new_cap);
        }
        self._data[self._size] = value;
        self._size = self._size + 1u;
    }
}

fn new_vector!(T)(arr: arena&) -> vector!(T)
{
    return vector!(T)(arr, nullptr, 0u);
}


arena a;
var v := new_vector!(i64)(a&);
v.reserve(25u);
var idx := 0;
while idx < 20 {
    v.push(idx);
    idx = idx + 1;
}

for a in v.to_span() {
    print("{}\n", a@);
}
print("{} {} {}\n", v.capacity(), v.size(), a.size());