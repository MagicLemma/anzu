
struct copyable
{
    val: i64;

    fn assign(self: copyable&, other: copyable&)
    {
        other@.val = self@.val;
        println("Assign called!");
    }

    fn copy(self: copyable&) -> copyable
    {
        println("Copy called!");
        return copyable(self@.val);
    }

    fn drop(self: copyable&) 
    {
        println("Drop called!");
    }
}


fn foo(c: copyable~) {
    c.val = 20;
    println(c.val);
}

x := copyable(10);
ref := x~;
foo(ref);
println("After foo call");
println(x.val);