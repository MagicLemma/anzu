

fn square(x: f64) -> f64 { return x * x; }

struct vec3
{
    x: f64;
    y: f64;
    z: f64;

    fn length(self: (const vec3)~) -> f64
    {
        let x_squared := square(self.x);
        let y_squared := square(self.y);
        let z_squared := square(self.z);
        return sqrt(x_squared + y_squared + z_squared);
    }

    fn copy(self: vec3~) -> vec3
    {
        return vec3(self.x, self.y, self.z);
    }

    fn assign(self: vec3~, other: vec3~)
    {
        self.x = other.x;
        self.y = other.y;
        self.z = other.z;
    }
}

# Member function testing
{
    let v := vec3(3.0, 4.0, 5.0);
    println("length of vec3(3.0, 4.0, 5.0):");
    println(v.length());
}