
struct vector!(T)
{
    arr: arena&;
    data: T[];
    size: u64;

    fn capacity(self: vector!(T) const&) -> u64
    {
        return self.data.size();
    }

    fn push(self: vector!(T) const&, value: T) -> null
    {
        let cap := self.capacity();
        if self.size <= cap {
            var new_cap := 8u;
            if cap > 0u {
                new_cap = cap * 2u;
            }
            var new_buf := new(self.arr, new_cap) T();
        }
    }
}

fn new_vector!(T)(arr: arena&) -> vector!(T)
{
    return vector!(T)(arr, nullptr, 0u);
}


arena a;
var v := new_vector!(i64)(a&);
v.push(10);
print("{}\n", v.capacity());