fn swap(lhs: i64&, rhs: i64&)
{
    let temp := lhs@;
    lhs@ = rhs@;
    rhs@ = temp;
}

fn qs_partition(arr: i64[], low: u64, high: u64) -> u64
{
    let p := arr[low];
    var i := low;
    var j := high;

    while i < j {
        while arr[i] <= p && i <= high - 1u {
            i = i + 1u;
        }
        while arr[j] > p && j >= low + 1u {
            j = j - 1u;
        }
        if (i < j) {
            swap(arr[i]&, arr[j]&);
        }
    }

    swap(arr[low]&, arr[j]&);
    return j;
}

fn partial_sort(arr: i64[], low: u64, high: u64)
{
    if (low >= high) return;

    let pi := qs_partition(arr, low, high);
    if (pi > 0u) {
        partial_sort(arr, low, pi - 1u);
    }
    if (pi < @len(arr) - 1u) {
        partial_sort(arr, pi + 1u, high);
    }
}

var arr := [3, 4, 2, 1, 3, 3];
partial_sort(arr[], 0u, @len(arr) - 1u);
for x in arr[] {
    print("{}\n", x@);
}